import Head from "next/head";
import Link from "next/link";
import Message from "../components/Message";

import { useEffect, useState } from "react";

import { db } from "../utils/firebase";
import { collection, onSnapshot, orderBy, query } from "firebase/firestore";

export default function Home() {
  const [allPosts, setAllPosts] = useState([]);
  useEffect(() => {
    const getPosts = async () => {
      // TODO: CRUD operation (read) firestore entry:
      const collectionRef = collection(db, "posts");
      // Creates a new immutable instance of `Query` that is extended to also -
      // include additional query constraints that are like filter criteria.
      // @param `query` — A Query instance to use as a base for new constraints.
      // @param `queryConstraints` — The list of filters to apply.
      const q = query(collectionRef, orderBy("timestamp", "desc"));
      // Attaches a listener for `DocumentSnapshot` events from our `db` that we
      // instance as a callback called `unsubscribe`, or better `snapshot`.
      // Instead of using separate getDoc/addDoc functions, we can use are -
      // `snapshot` instance of `onSnapshot` to read/write data in real-time.
      const snapshot = onSnapshot(q, (snap) => {
        // Our snap `docs` is an array of all documents in the `QuerySnapshot`.
        // With `map` we return a new array that we spread each item of data -
        // into an array object entry, that is from each firestore document.
        // console.log(snap);
        const update = snap.docs.map((doc) => ({
          ...doc.data(),
          id: doc.id,
        }));
        setAllPosts(update);
      });
      return snapshot;
    };
    getPosts();
  }, []);

  if (!allPosts.length) return <div>We need posts...</div>;
  return (
    <div>
      <Head>
        <title>Creative Threads</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <div className="my-12 text-lg font-medium drop-shadow-lg rounded-lg">
        <h1 className="text-2xl font-medium py-2 mb-2">All Posts</h1>
        <h2 className="mb-8">See what other people are saying</h2>
        {allPosts.map((post) => (
          // Here we just spread everything we iterate into our `props`:
          <Message key={post.id} {...post}>
            <Link
              href={{ pathname: `/comments/${post.id}`, query: { ...post } }}
            >
              <button className="flex items-center gap-2 font-medium">
                {post.comments?.length > 0 ? (
                  <span className="rounded-full bg-slate-100 px-2 py-1 text-xs font-semibold text-slate-700">
                    {post.comments.length}
                  </span>
                ) : (
                  <span className="rounded-full bg-slate-100 px-2 py-1 text-xs font-semibold text-slate-700">
                    0
                  </span>
                )}
                comments
              </button>
            </Link>
          </Message>
        ))}
      </div>
    </div>
  );
}
